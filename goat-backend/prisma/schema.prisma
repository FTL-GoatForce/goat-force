generator client {
  provider = "prisma-client-js"
}

generator py {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Deals {
  id                   Int                   @id @default(autoincrement())
  user_id              String?               // UUID to associate deals with users (nullable for existing data)
  deal_name            String
  company_name         String
  stage                String?
  expected_close_date  String
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  contract_term_length String
  deal_description     String
  deal_value           Float
  service_category     String
  job_status           String                @default("idle")
  activities_metrics   ActivityMetrics[]
  ai_recommendations   AiRecommendation[]
  conversation_history ConversationHistory[]
  deal_insights        DealInsights[]
  follow_ups           FollowUp[]
  participants         Participants[]
  risks                Risks[]
  tags                 Tags[]
}

model Participants {
  id                  Int           @id @default(autoincrement())
  deal_id             Int
  prospect_name       String
  email               String
  slack_id            String
  role                String?
  sentiment           String?
  communication_score Float?
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  phone_number        String
  deal                Deals         @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  personality         Personality[]
}

model Risks {
  id                  Int               @id @default(autoincrement())
  deal_id             Int
  deal_risk_score     Float
  churn_risk_score    Float
  timeline_risk_score Float
  budget_risk_score   Float
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  risk_explanation    RiskExplanation[]
  deal                Deals             @relation(fields: [deal_id], references: [id], onDelete: Cascade)
}

model ActivityMetrics {
  id                         Int        @id @default(autoincrement())
  deal_id                    Int
  message_count              Int
  prospect_response_time     Float
  engagement_trend           String
  last_communication_source  String
  last_communication_summary String
  created_at                 DateTime   @default(now())
  updated_at                 DateTime   @updatedAt
  deal                       Deals      @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  timeline                   Timeline[]
}

model AiRecommendation {
  id                        Int      @id @default(autoincrement())
  deal_id                   Int
  next_steps                String[]
  escalation_triggers       String
  deal_acceleration_tactics String
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  deal                      Deals    @relation(fields: [deal_id], references: [id], onDelete: Cascade)
}

model FollowUp {
  id                 Int       @id @default(autoincrement())
  deal_id            Int
  communication_type String
  contact_address    String
  subject            String?
  body               String?
  message_id         String?
  scheduled_at       DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deal               Deals     @relation(fields: [deal_id], references: [id], onDelete: Cascade)
}

model Tags {
  id         Int      @id @default(autoincrement())
  deal_id    Int
  tag        String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deal       Deals    @relation(fields: [deal_id], references: [id], onDelete: Cascade)
}

model ConversationHistory {
  id           Int      @id @default(autoincrement())
  deal_id      Int
  slack        Json
  email        Json
  deal_summary String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deal         Deals    @relation(fields: [deal_id], references: [id], onDelete: Cascade)
}

model DealInsights {
  id                    Int      @id @default(autoincrement())
  deal_id               Int
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  competitive_position  String
  decision_maker_status String
  key_objections        String[]
  urgency_level         String
  deal                  Deals    @relation(fields: [deal_id], references: [id], onDelete: Cascade)
}

model RiskExplanation {
  id                        Int      @id @default(autoincrement())
  risk_id                   Int
  budget_risk_explanation   String
  timeline_risk_explanation String
  churn_risk_explanation    String
  deal_risk_summary         String
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  risk                      Risks    @relation(fields: [risk_id], references: [id], onDelete: Cascade)
}

model Personality {
  id                 Int          @id @default(autoincrement())
  participant_id     Int
  personality_traits Json
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  participant        Participants @relation(fields: [participant_id], references: [id], onDelete: Cascade)
}

model Timeline {
  id                  Int             @id @default(autoincrement())
  activity_metrics_id Int
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  event               Json
  activity_metrics    ActivityMetrics @relation(fields: [activity_metrics_id], references: [id], onDelete: Cascade)
}
